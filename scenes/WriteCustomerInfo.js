const { Scenes, Markup } = require("telegraf");
const customerModel = require("../models/customerModel");
const logger = require("../utils/logger");

module.exports = new Scenes.WizardScene(
    'WriteCustomerInfo',
    async (ctx) => {
        ctx.session.scene = { temp: 0, name: '', phone: '' }

        const message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É —Ç–∞–∫—Å–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å –í–∞—à –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ - –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–∞—Å–∞–∂–∏—Ä–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:'
        ctx.session.scene.temp = (await ctx.reply(message)).message_id

        ctx.wizard.next()
    },
    async (ctx) => {
        if (!ctx?.message?.text) return

        try { await ctx.deleteMessage() } catch (e) {}
        try { await ctx.deleteMessage(ctx.session.scene.temp) } catch (e) {}

        ctx.session.scene.name = ctx.message.text

        const message = `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è, ${ctx.message.text}!\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—á–∏–Ω–∞—è —Å +7.\n\n–ü—Ä–∏–º–µ—Ä: +79991002020`
        ctx.session.scene.temp = (await ctx.reply(message)).message_id

        ctx.wizard.next()
    },
    async (ctx) => {
        if (!ctx?.message?.text) return

        const phone = ctx.message.text

        try { await ctx.deleteMessage() } catch (e) {}
        try { await ctx.deleteMessage(ctx.session.scene.temp) } catch (e) {}

        const isCorrect = phone.startsWith('+79') && phone.length === 12
        if (!isCorrect) {
            const tempMessage = (await ctx.reply('–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ù–∞–ø–æ–º–Ω—é –ø—Ä–∏–º–µ—Ä: +79991002020')).message_id
            setTimeout(async () => { try { await ctx.deleteMessage(tempMessage) } catch (e) {} }, 2000)
            return
        }

        ctx.session.scene.phone = phone

        const { name } = ctx.session.scene
        const message = `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\nüë§ ${name}\nüì± ${phone}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?`
        const keyboard = Markup.inlineKeyboard([[
            Markup.button.callback('–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ', 'confirm_yes'), 
            Markup.button.callback('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', 'confirm_no')
        ]])

        ctx.reply(message, keyboard)

        ctx.wizard.next()
    },
    async (ctx) => {
        if (!ctx?.callbackQuery?.data) return

        const isConfirm = ctx.callbackQuery.data.endsWith('yes')
        if (!isConfirm) {
            try { await ctx.deleteMessage() } catch (e) {}
            ctx.session.scene.temp = (await ctx.reply('–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å–Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')).message_id
            return ctx.wizard.selectStep(1)
        }

        try { await ctx.deleteMessage() } catch (e) {}

        const { name, phone } = ctx.session.scene
        const { id, username } = ctx.callbackQuery.from

        await customerModel.create({ id, username, phone, name })

        ctx.reply('–û—Ç–ª–∏—á–Ω–æ, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏!', Markup.inlineKeyboard([Markup.button.callback('–í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏ üöï', 'user_order_taxi')]))

        logger.ans(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username ? username : id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`)

        ctx.session.scene = {}
        ctx.scene.leave()
    }

)